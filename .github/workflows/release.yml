name: Release

permissions:
  contents: write

on:
  push:
    branches: [ 'main' ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      semver: ${{ steps.version.outputs.semver }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Install GitVersioning
        run: dotnet tool install --global nbgv

      - name: Get version from nbgv
        id: version
        run: |
          echo "version=$(nbgv get-version -v NuGetPackageVersion)" >> $GITHUB_OUTPUT
          echo "semver=$(nbgv get-version -v SemVer2)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.semver }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.name "GitHub Actions"
          git tag "v${{ steps.version.outputs.semver }}"
          git push origin "v${{ steps.version.outputs.semver }}"

      - name: Restore dependencies
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          dotnet restore

      - name: Build
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          dotnet build --configuration Release --no-restore

      - name: Test
        if: steps.check_tag.outputs.exists == 'false'
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Pack
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          dotnet pack --configuration Release --no-build --output ./nupkg

      - name: Generate changelog
        if: steps.check_tag.outputs.exists == 'false'
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk "/^## \[?${{ steps.version.outputs.semver }}\]?/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > release-notes.md
          else
            echo "## Changes in ${{ steps.version.outputs.semver }}" > release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release-notes.md || echo "- Initial release" >> release-notes.md
          fi

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.semver }}
          name: Release ${{ steps.version.outputs.semver }}
          body_path: release-notes.md
          files: |
            ./nupkg/*.nupkg
            ./nupkg/*.snupkg
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Publish to NuGet
        if: steps.check_tag.outputs.exists == 'false'
        run: dotnet nuget push ./nupkg/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Upload packages as artifacts
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ steps.version.outputs.version }}
          path: ./nupkg/*